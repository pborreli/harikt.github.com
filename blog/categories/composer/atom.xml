<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Composer | Random thoughts | Hari KT]]></title>
  <link href="http://harikt.com/blog/categories/composer/atom.xml" rel="self"/>
  <link href="http://harikt.com/"/>
  <updated>2014-05-29T10:15:07+05:30</updated>
  <id>http://harikt.com/</id>
  <author>
    <name><![CDATA[Hari K T]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hidden Gems of Composer]]></title>
    <link href="http://harikt.com/blog/2014/05/29/hidden-gems-of-composer/"/>
    <updated>2014-05-29T07:53:53+05:30</updated>
    <id>http://harikt.com/blog/2014/05/29/hidden-gems-of-composer</id>
    <content type="html"><![CDATA[<p>I hope everyone in the PHP world is aware of <a href="https://getcomposer.org">composer</a>
the dependency management tool that gives an end to Pear.</p>

<p>We can look into some of the hidden gems of composer. Some of them are
already documented in the composer docs.</p>

<h2>Bug Fixing :</h2>

<p>Documented over <a href="https://getcomposer.org/doc/05-repositories.md#loading-a-package-from-a-vcs-repository">Loading a package from a VCS repository</a></p>

<p>```json
{</p>

<pre><code>"repositories": [
    {
        "type": "vcs",
        "url": "https://github.com/igorw/monolog"
    }
],
"require": {
    "monolog/monolog": "dev-bugfix"
}
</code></pre>

<p>}
```</p>

<p>The above example assume you have pushed your code to github. But you can
also make use of the local directory.</p>

<p>Assume you are organizing your code something like</p>

<p>```bash
home
└── github.com</p>

<pre><code>└── harikt
    ├── Aura.Router
    ├── Aura.Web
    └── monolog
</code></pre>

<p>```</p>

<p>Now on your project you could make use of the patches you are working on
the local directory without pushing it to github.</p>

<blockquote><p>Note : You should commit the changes though.</p></blockquote>

<p>```json
{</p>

<pre><code>"minimum-stability":"dev",
"repositories": [
    {
        "type": "vcs",
        "url": "/home/github.com/harikt/monolog"            
    }
],
"require": {
    "monolog/monolog": "dev-bugfix"
}
</code></pre>

<p>}
```</p>

<p>And you can also disable packagist for fast look up.</p>

<h2>Experimenting your own packages</h2>

<p>I did add packages in <a href="https://packagist.org">packagist</a> for testing.
This is really a wrong way to do, you are adding more packages that
makes other people&rsquo;s life hard to find a useful package.</p>

<p>What I learned is, you can do in a different way. See docs under
<a href="https://getcomposer.org/doc/05-repositories.md#package-2">Package</a></p>

<p>So your <code>composer.json</code> will look something like this.</p>

<p>```json
{</p>

<pre><code>"minimum-stability":"dev",
"repositories": [        
    {
        "type": "package",
        "package": {
            "name": "harikt/experiments",
            "version": "3.1.7",               
            "source": {
                "type": "git",
                "url": "/home/github.com/harikt/experiments",
                "reference": "master"
            },
            "autoload": {
                "classmap": ["libs/"]
            }
        }
    }
],
"require": {        
    "harikt/experiments": "3.1.*"
}
</code></pre>

<p>}
```</p>

<p>That&rsquo;s for now.</p>

<p>Happy PhPing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Aura Framework Project via Composer]]></title>
    <link href="http://harikt.com/blog/2014/04/29/installing-aura-framework-project-via-composer/"/>
    <updated>2014-04-29T07:50:48+05:30</updated>
    <id>http://harikt.com/blog/2014/04/29/installing-aura-framework-project-via-composer</id>
    <content type="html"><![CDATA[<p>In this tutorial I am showing how to install aura framework project v2
via composer.</p>

<pre><code>composer create-project -s beta aura/framework-project path-to-project
</code></pre>

<p><a href="https://github.com/auraphp/Aura.Framework_Project">Aura.Framework_Project</a> helps
you to build web and cli applications.</p>

<p>If you need only web based application then
<a href="https://github.com/auraphp/Aura.Web_Project">Aura.Web_Project</a>
is what you need.</p>

<p><div class="embed-video-container"><iframe src="http://showterm.io/b971330ea7fd28d22e2f3 "></iframe></div></p>

<p>If you need only cli, then <a href="https://github.com/auraphp/Aura.Cli_Project">Aura.Cli_Project</a> helps you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Aura Cli Project via Composer]]></title>
    <link href="http://harikt.com/blog/2014/04/29/installing-aura-cli-project-via-composer/"/>
    <updated>2014-04-29T07:50:37+05:30</updated>
    <id>http://harikt.com/blog/2014/04/29/installing-aura-cli-project-via-composer</id>
    <content type="html"><![CDATA[<p>In this tutorial I am showing how to install aura cli project v2
via composer.</p>

<pre><code>composer create-project -s beta aura/cli-project path-to-project
</code></pre>

<p><a href="https://github.com/auraphp/Aura.Cli_Project">Aura.Cli_Project</a> help
you to build cli ( command line ) applications.</p>

<p><div class="embed-video-container"><iframe src="http://showterm.io/4baa2e4db41b12786a7ce "></iframe></div></p>

<p>If you need only web based application then
<a href="https://github.com/auraphp/Aura.Web_Project">Aura.Web_Project</a>
is what you need.</p>

<p>If you need web and cli, then
<a href="https://github.com/auraphp/Aura.Framework_Project">Aura.Framework_Project</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Aura Web Project via Composer]]></title>
    <link href="http://harikt.com/blog/2014/04/29/installing-aura-web-project-via-composer/"/>
    <updated>2014-04-29T07:50:30+05:30</updated>
    <id>http://harikt.com/blog/2014/04/29/installing-aura-web-project-via-composer</id>
    <content type="html"><![CDATA[<p>In this tutorial I am showing how to install aura web project v2
via composer.</p>

<pre><code>composer create-project -s beta aura/web-project path-to-project
</code></pre>

<p><a href="https://github.com/auraphp/Aura.Web_Project">Aura.Web_Project</a> helps
you to build web based application. If you need web and cli then
<a href="https://github.com/auraphp/Aura.Framework_Project">Aura.Framework_Project</a>
is what you need.</p>

<p><div class="embed-video-container"><iframe src="http://showterm.io/ca62d66745c55a80780bc "></iframe></div></p>

<p>If you need only cli, then <a href="https://github.com/auraphp/Aura.Cli_Project">Aura.Cli_Project</a> helps you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composer Support for ProcessWire : Part-2]]></title>
    <link href="http://harikt.com/blog/2013/11/19/composer-support-for-processwire-part-2/"/>
    <updated>2013-11-19T08:37:00+05:30</updated>
    <id>http://harikt.com/blog/2013/11/19/composer-support-for-processwire-part-2</id>
    <content type="html"><![CDATA[<p>In my <a href="http://harikt.com/blog/2013/11/16/composer-support-for-processwire-modules/">earlier post</a>
I mentioned about adding a <code>composer.json</code> in the root of the github repo.</p>

<p>Sometimes you may see a non <code>composer.json</code> repo or some times people reject
it, you still can do like the below.</p>

<p>```php
{</p>

<pre><code>"minimum-stability": "dev",
"repositories": [
    {
        "type": "package",
        "package": {
            "name": "ryancramerdesign/process-export-profile",
            "version": "1.0.0",
            "source": {
                "url": "https://github.com/ryancramerdesign/ProcessExportProfile",
                "type": "git",
                "reference": "master"
            },
            "type": "pw-module",
            "require": {
                "hari/pw-module": "dev-master"
            }
        }
    }
],    
"require": {
    "ryancramerdesign/process-export-profile": "1.0.0"
}
</code></pre>

<p>}
```</p>

<p>And run</p>

<p><code>bash
php composer.phar update
</code></p>

<blockquote><p>Don&rsquo;t forget you need <code>composer.phar</code>. If you don&rsquo;t have get from <a href="http://getcomposer.org/download/">getcomposer.org</a></p></blockquote>

<p>The module is downloaded to <code>site/modules/ProcessExportProfile</code>.
The package is of type <a href="https://github.com/harikt/pwmoduleinstaller">pw-module</a></p>

<blockquote><p>The name process-export-profile is converted to ProcessExportProfile .
So if you have caps in between name put a hyphen in the naming</p></blockquote>
]]></content>
  </entry>
  
</feed>
