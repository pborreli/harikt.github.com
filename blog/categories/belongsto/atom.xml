<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: belongsTo | Random thoughts | Hari KT]]></title>
  <link href="http://harikt.com/blog/categories/belongsto/atom.xml" rel="self"/>
  <link href="http://harikt.com/"/>
  <updated>2014-04-26T20:45:56+05:30</updated>
  <id>http://harikt.com/</id>
  <author>
    <name><![CDATA[Hari K T]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relationship Support in Lithium Aka Li3]]></title>
    <link href="http://harikt.com/blog/2011/03/10/relationship-support-lithium-aka-li3/"/>
    <updated>2011-03-10T08:37:00+05:30</updated>
    <id>http://harikt.com/blog/2011/03/10/relationship-support-lithium-aka-li3</id>
    <content type="html"><![CDATA[<p>So now some of the relationship support has been there in lithium&rsquo;s x-relationships branch . I was talking with Howard Lince and Nateabele about the progress in relationships .  You can see the updated roadmap <a href="http://dev.lithify.me/lithium/wiki/about/roadmap">here</a> .  So lets start playing with relationships right ?  Currently we have  1 ) hasOne => 1 to 1  2 ) hasMany = > 1 to N  3 ) belongsTo => N to 1 or 1 to 1  4 ) HABTM work in progress  Eg 1 : A user has one profile . hasOne  Eg 2 : A user has many posts  Eg 3 : A user has many comments  Eg 4 : Single or many comments belongs to user .  Eg 5 : A single or many posts belongs to user .  Currently as the work for relationships is in progress I cannot point you to <a href="http://lithify.me/docs.">http://lithify.me/docs.</a> But Cake PHP has good documentation of the concepts. You can read it from <a href="http://book.cakephp.org/view/1039/Associations-Linking-Models-">cakephp</a>  I am going to show only some snippets of code how to create relationships. Once you have done with it , you will be a master.  Note :The command &ldquo;li3 create model&rdquo; previoulsy was creating models as singular. But from now onwards its Plural, so the command may be creating singular named file. So you need to do the necessary changes , will be fixed soon before 1.0 release.  We are moving to x-relationships branch. ie  $git checkout x-relationships  What I am going to show is relationship with user and post and user with comments. I assume only registered users can add posts and comments .  So lets dive into it .  Below is the table structure  Now you want to create Comments , Posts , Users models in your app/models folder .  Comments are posted for a particular post by a user .  So we are relating it via variable belongsTo . It must be public.  The $_schema is the array which is the same order the fields are created in table.  The $validates array contains the validations needed.  A user can post many comments and posts . Here in hasMany we have shown the relationship to the other .But its not needed as lithium is smart enough to know your foreign key relationships if you followed it.  Lithium uses filters. Filters are essentially an efficient way of introducing event-driven communication between classes in your application. You can read over <a href="http://dev.lithify.me/drafts/source/en/02_lithium_basics/02_filters.wiki">filters</a> .  So in your controllers action , you can fetch data like the below.  The Post::find() fetches the post of that particular id and the user who posted it .The Comments::find() fetches the comments and the user who posted it .  If you are storing the users name , email etc in comments table and not like the one I showed then the best way is to add Comments also to the with in Post::find()  A print_r for $post->data() will show the values. You can use a filter to check whether a query is fired and dump the query.  Add the below code in bootstrap.php  Thanks to Nate Abele , Howard and all my #li3 friends who helped me to make this post.  You can see the whole things over <a href="https://github.com/harikt/li3_tests">https://github.com/harikt/li3_tests</a> . More experiments will be added to it :) .</p>
]]></content>
  </entry>
  
</feed>
