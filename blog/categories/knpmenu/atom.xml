<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Knpmenu | Random thoughts | Hari KT]]></title>
  <link href="http://harikt.com/blog/categories/knpmenu/atom.xml" rel="self"/>
  <link href="http://harikt.com/"/>
  <updated>2014-05-13T19:34:35+05:30</updated>
  <id>http://harikt.com/</id>
  <author>
    <name><![CDATA[Hari K T]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Standalone Menu's With PHP]]></title>
    <link href="http://harikt.com/blog/2012/06/01/standalone-menu-and-breadcrumb-in-php/"/>
    <updated>2012-06-01T22:26:00+05:30</updated>
    <id>http://harikt.com/blog/2012/06/01/standalone-menu-and-breadcrumb-in-php</id>
    <content type="html"><![CDATA[<p>The era of standalone components is here. Yes people will definitely take and promote standalone components . Lets have a look into the <a href="http://github.com/knplabs/KnpMenu">KnpMenu</a> . Its awesome that you can create awesome menu . Yes with PHP and after all there is no dependencies . Lets see some examples {syntaxhighlighter class=&ldquo;php&rdquo;} use Knp\Menu\MenuFactory; use Knp\Menu\Renderer\ListRenderer; $factory = new MenuFactory(); $menu = $factory->createItem(&lsquo;My menu&rsquo;); $home = $menu->addChild(&lsquo;Home&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;/&rsquo;)); $home1 = $home->addChild(&lsquo; Home1&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;/about&rsquo;)); $home1->addChild(&lsquo;Company&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;/about/company&rsquo;)); $home1->addChild(&lsquo;Life&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;/about/life&rsquo;)); $home1->addChild(&lsquo;Work&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;/about/work&rsquo;)); $menu->addChild(&lsquo;Comments&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;#comments&rsquo;)); $menu->addChild(&lsquo;Aura&rsquo;, array(&lsquo;uri&rsquo; => &lsquo;<a href="http://auraphp.github.com/">http://auraphp.github.com/</a>&rsquo;)); $menu->addChild(&lsquo;Coming soon&rsquo;); $renderer = new ListRenderer(); echo $renderer->render($menu); {/syntaxhighlighter} The above will give you the below output. {syntaxhighlighter class=&ldquo;html&rdquo;} &ndash;   <a href="/">Home</a>     &ndash;   <a href="/about">&lt; Home1</a>         &ndash;   <a href="/about/company">Company</a>         &ndash;   <a href="/about/life">Life</a>         &ndash;   <a href="/about/work">Work</a>   &ndash;   <a href="#comments">Comments</a> &ndash;   <a href="http://auraphp.github.com/">Aura</a> &ndash;   Coming soon  {/syntaxhighlighter} You can also create from an array. I was having some issue and Thank you Christophe Coevoet ( <a href="https://twitter.com/#!/Stof70">@Stof70</a> ) for quickly helping me. I was copying some test data and didn&rsquo;t noticed one of the display value was hidden :P . So here it comes :&ndash;) . {syntaxhighlighter class=&ldquo;php&rdquo;} use Knp\Menu\MenuFactory; use Knp\Menu\Renderer\ListRenderer; $factory = new MenuFactory(); $array = array( &lsquo;name&rsquo; => &lsquo;test_menu&rsquo;, &lsquo;label&rsquo; => &ldquo;Home&rdquo;, &lsquo;uri&rsquo; => &lsquo;homepage&rsquo;, &lsquo;attributes&rsquo; => array(), &lsquo;labelAttributes&rsquo; => array(), &lsquo;linkAttributes&rsquo; => array(), &lsquo;display&rsquo; => true, &lsquo;displayChildren&rsquo; => true, &lsquo;children&rsquo; => array( &lsquo;jack&rsquo; => array( &lsquo;name&rsquo; => &lsquo;jack&rsquo;, &lsquo;label&rsquo; => &ldquo;Jack&rdquo;, &lsquo;uri&rsquo; => &lsquo;<a href="http://php.net">http://php.net</a>&rsquo;, &lsquo;attributes&rsquo; => array(), &lsquo;labelAttributes&rsquo; => array(), &lsquo;linkAttributes&rsquo; => array(&lsquo;title&rsquo; => &lsquo;php&rsquo;), &lsquo;display&rsquo; => true, &lsquo;displayChildren&rsquo; => true, &lsquo;children&rsquo; => array( &lsquo;john&rsquo; => array( &lsquo;name&rsquo; => &lsquo;john&rsquo;, &lsquo;label&rsquo; => &ldquo;John&rdquo;, &lsquo;uri&rsquo; => null, &lsquo;attributes&rsquo; => array(), &lsquo;labelAttributes&rsquo; => array(), &lsquo;linkAttributes&rsquo; => array(), &lsquo;display&rsquo; => true, &lsquo;displayChildren&rsquo; => true, &lsquo;children&rsquo; => array( &lsquo;doe&rsquo; => array( &lsquo;name&rsquo; => &lsquo;doe&rsquo;, &lsquo;label&rsquo; => &lsquo;doe&rsquo;, &lsquo;uri&rsquo; => &lsquo;<a href="http://google.com">http://google.com</a>&rsquo; ) ), ), ), ), &lsquo;joe&rsquo; => array( &lsquo;name&rsquo; => &lsquo;joe&rsquo;, &lsquo;label&rsquo; => &lsquo;test&rsquo;, &lsquo;uri&rsquo; => null, &lsquo;attributes&rsquo; => array(&lsquo;class&rsquo; => &lsquo;leaf&rsquo;), &lsquo;labelAttributes&rsquo; => array(&lsquo;class&rsquo; => &lsquo;center&rsquo;), &lsquo;linkAttributes&rsquo; => array(), &lsquo;display&rsquo; => true, &lsquo;displayChildren&rsquo; => false, &lsquo;children&rsquo; => array(), ), ), ); $menu = $factory->createFromArray($array); $renderer = new ListRenderer(); echo $renderer->render($menu); {/syntaxhighlighter} And this will print the below html. Consider making values hidden etc . You can notice how the output changes. {syntaxhighlighter class=&ldquo;html&rdquo;} &ndash;   <a href="http://php.net" title="php">jack</a>     &ndash;   john         &ndash;   <a href="http://google.com">doe</a>   &ndash;   test  {/syntaxhighlighter} There is Breadcrumb also in the latest 2.0 master branch ( Not yet released ? ) . I have not explored more how we can make it . I will update the post once I play with the Breadcrumbs. So good bye to Zend_Navigation. Its a new beginning for <a href="http://knplabs.com/">Knplabs</a> , KnpMenu . Ryan Weaver deserves some credits for its a port of <a href="http://github.com/weaverryan/ioMenuPlugin">http://github.com/weaverryan/ioMenuPlugin</a> ( symfony 1 plugin, but for the PHP community as a whole ). Source Code : <a href="http://github.com/knplabs/KnpMenu">http://github.com/knplabs/KnpMenu</a> Its already having great documentation :) . Go and explore guys .. Look through tests if you have doubts ;&ndash;) . Ask support at Symfony irc . May be at a different one later ?</p>
]]></content>
  </entry>
  
</feed>
